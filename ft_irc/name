src/serveur/#sv_cl_register.c#:	ptr = e->users;
src/serveur/sv_accept.c:	cl = e->fds;
src/serveur/sv_accept.c:	if (e->verb)
src/serveur/sv_accept.c:	new.fd = accept((!ip) ? e->ipv4 : e->ipv6, &new.csin, &len);
src/serveur/sv_accept.c:	e->members++;
src/serveur/sv_accept.c:	if (e->members >= MAX_CLIENT)
src/serveur/sv_accept.c:	e->members--;
src/serveur/sv_chan.c:		e->chan = cl->chan->next;
src/serveur/sv_cl_end.c:	FD_CLR(cl->fd, &e->fd_read);
src/serveur/sv_cl_end.c:	FD_CLR(cl->fd, &e->fd_write);
src/serveur/sv_cl_end.c:		e->fds = cl->next;
src/serveur/sv_cl_end.c:	if (e->verb)
src/serveur/sv_cl_end.c:	e->members--;
src/serveur/sv_cl_read.c:	if (e->verb && *cl->rd.tail == '\n')
src/serveur/sv_cl_register.c:	ptr = e->users;
src/serveur/sv_cl_write.c:		if (e->verb)
src/serveur/sv_command_client.c:		send(cl->fd, e->name, NAME_SIZE, 0);
src/serveur/sv_command_client.c:	ch = e->chan;
src/serveur/sv_error.c:	while (e->fds && i < MAX_CLIENT)
src/serveur/sv_error.c:		if (e->fds[i].type == FD_CLIENT)
src/serveur/sv_error.c:			send(e->fds[i].fd, str, len, 0);
src/serveur/sv_error.c:		close(e->fds[i].fd);
src/serveur/sv_error.c:		ft_memset(&e->fds[i], 0, sizeof(e->fds[i]));
src/serveur/sv_error.c:	if (e->users)
src/serveur/sv_error.c:		sv_free_users(&e->users);
src/serveur/sv_error.c:	if (e->fds)
src/serveur/sv_error.c:		free(e->fds);
src/serveur/sv_error.c:	if (e->chan)
src/serveur/sv_error.c:		sv_free_chan(&e->chan);
src/serveur/sv_error.c:	FD_ZERO(&e->fd_read);
src/serveur/sv_error.c:	FD_ZERO(&e->fd_write);
src/serveur/sv_error.c:	close(e->ipv4);
src/serveur/sv_error.c:	close(e->ipv6);
src/serveur/sv_error.c:	if (e->verb)
src/serveur/sv_init_server.c:	if ((isv6 && getsockname(e->ipv6, (struct sockaddr *)&s6, &len)) ||
src/serveur/sv_init_server.c:		(!isv6 && getsockname(e->ipv4, (struct sockaddr *)&s4, &len)))
src/serveur/sv_init_server.c:		return (sv_sockerr("getsockname failed.", (isv6) ? e->ipv6 : e->ipv4));
src/serveur/sv_init_server.c:		inet_ntop(AF_INET6, &s6.sin6_addr.s6_addr, e->addr6, sizeof(e->addr6));
src/serveur/sv_init_server.c:		inet_ntop(AF_INET, &s4.sin_addr.s_addr, e->addr4, sizeof(e->addr4));
src/serveur/sv_init_server.c:	return ((isv6) ? e->ipv6 : e->ipv4);
src/serveur/sv_init_server.c:		if (e->ipv4 < 0 && p->ai_family == AF_INET)
src/serveur/sv_init_server.c:			e->ipv4 = sv_findsocket(p, 0);
src/serveur/sv_init_server.c:		if (e->ipv6 < 0 && p->ai_family == AF_INET6)
src/serveur/sv_init_server.c:			e->ipv6 = sv_findsocket(p, 1);
src/serveur/sv_init_server.c:		if (e->ipv4 != -1 && e->ipv6 != -1)
src/serveur/sv_init_server.c:	if (p == NULL && e->ipv4 < 0 && e->ipv6 < 0)
src/serveur/sv_init_server.c:	ft_strncpy(e->name, (p) ? p->pw_name : "unknown", sizeof(e->name));
src/serveur/sv_init_server.c:	e->ipv4 = -1;
src/serveur/sv_init_server.c:	e->ipv6 = -1;
src/serveur/sv_init_server.c:		printf("%s %s\n", e->addr4, port);
src/serveur/sv_init_server.c:		printf("%s %s\n", e->addr6, port);
src/serveur/sv_init_server.c:	if (e->ipv4 >= 0 && listen(e->ipv4, MAX_CLIENT) == -1)
src/serveur/sv_init_server.c:	if (e->ipv6 >= 0 && listen(e->ipv6, MAX_CLIENT) == -1)
src/serveur/sv_join.c:	tmp = e->chan;
src/serveur/sv_join.c:	tmp = e->chan;
src/serveur/sv_leave.c:	ch = e->chan;
src/serveur/sv_loop.c:	cl = e->fds;
src/serveur/sv_loop.c:	if (FD_ISSET(e->ipv4, &e->fd_read))
src/serveur/sv_loop.c:	if (FD_ISSET(e->ipv6, &e->fd_read))
src/serveur/sv_loop.c:			if (FD_ISSET(cl->fd, &e->fd_write))
src/serveur/sv_loop.c:			if (FD_ISSET(cl->fd, &e->fd_read))
src/serveur/sv_loop.c:			if (FD_ISSET(cl->fd, &e->fd_read) ||
src/serveur/sv_loop.c:				FD_ISSET(cl->fd, &e->fd_write))
src/serveur/sv_loop.c:	cl = e->fds;
src/serveur/sv_loop.c:	max = (e->ipv4 > e->ipv6) ? e->ipv4 : e->ipv6;
src/serveur/sv_loop.c:	FD_ZERO(&e->fd_read);
src/serveur/sv_loop.c:	FD_ZERO(&e->fd_write);
src/serveur/sv_loop.c:	FD_SET(e->ipv4, &e->fd_read);
src/serveur/sv_loop.c:	FD_SET(e->ipv6, &e->fd_read);
src/serveur/sv_loop.c:				FD_SET(cl->fd, &e->fd_read);
src/serveur/sv_loop.c:				FD_SET(cl->fd, &e->fd_write);
src/serveur/sv_loop.c:	cl = e->fds;
src/serveur/sv_loop.c:	if (e->verb)
src/serveur/sv_loop.c:		ret = select(max + 1, &e->fd_read, &e->fd_write, NULL, NULL);
src/serveur/sv_main.c:	e->verb = 0;
src/serveur/sv_main.c:					e->verb = 1;
src/serveur/sv_main.c:	e->users = get_users_list();
src/serveur/sv_main.c:	e->members = 0;
src/serveur/sv_main.c:	e->fds = NULL;
src/serveur/sv_main.c:	e->chan = NULL;
src/serveur/sv_new_client.c:	send(cl->fd, e->name, NAME_SIZE, 0);
src/serveur/sv_new_client.c:	send(cl->fd, e->creation, ft_strlen(e->creation), 0);
src/serveur/sv_new_client.c:	us = e->chan->user;
src/serveur/sv_new_client.c:			us = e->chan->user;
src/serveur/sv_new_client.c:	cl->chan = e->chan;
src/serveur/sv_new_client.c:	e->chan->nbusers++;
src/serveur/sv_new_client.c:	e->chan->user = sv_add_chan_user(e->chan, cl->user);
src/serveur/sv_new_client.c:	new = e->fds;
src/serveur/sv_new_client.c:		e->fds = cl;
src/serveur/sv_new_client.c:	if (e->verb)
src/serveur/sv_nick.c:	f = e->users;
